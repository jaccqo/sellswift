"use strict";

function _classCallCheck(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}

function _defineProperties(e, t) {
  for (var n = 0; n < t.length; n++) {
    var a = t[n];
    (a.enumerable = a.enumerable || !1),
      (a.configurable = !0),
      "value" in a && (a.writable = !0),
      Object.defineProperty(e, a.key, a);
  }
}

function _createClass(e, t, n) {
  return (
    t && _defineProperties(e.prototype, t),
    n && _defineProperties(e, n),
    Object.defineProperty(e, "prototype", { writable: !1 }),
    e
  );
}

var ThemeCustomizer = (function () {
  function e() {
    _classCallCheck(this, e),
      (this.html = document.getElementsByTagName("html")[0]),
      (this.config = {}),
      (this.defaultConfig = window.config);
  }

  return (
    _createClass(e, [
      {
        key: "initConfig",
        value: function () {
          this.defaultConfig = JSON.parse(
            JSON.stringify(window.defaultConfig)
          );
          const storedConfig = localStorage.getItem("__HYPER_CONFIG__");
          this.config = storedConfig
            ? JSON.parse(storedConfig)
            : JSON.parse(JSON.stringify(window.config));
          this.applyConfig();
        },
      },
      {
        key: "applyConfig",
        value: function () {
            if (!this.config || typeof this.config !== 'object') return;

            try {
                if (this.config.theme) {
                    const themeInput = document.querySelector(`input[name="data-bs-theme"][value="${this.config.theme}"]`);
                    if (themeInput) themeInput.checked = true;
                }
            } catch (error) {
                console.error('Error applying theme:', error);
            }

            try {
                if (this.config.menu && this.config.menu.color) {
                    const menuColorInput = document.querySelector(`input[name="data-menu-color"][value="${this.config.menu.color}"]`);
                    if (menuColorInput) menuColorInput.checked = true;
                }
            } catch (error) {
                console.error('Error applying menu color:', error);
            }

            try {
                if (this.config.sidenav && this.config.sidenav.size) {
                    const sidenavSizeInput = document.querySelector(`input[name="data-sidenav-size"][value="${this.config.sidenav.size}"]`);
                    if (sidenavSizeInput) sidenavSizeInput.checked = true;
                }
            } catch (error) {
                console.error('Error applying sidenav size:', error);
            }

            try {
                if (this.config.layout && this.config.layout.mode) {
                    const layoutModeInput = document.querySelector(`input[name="data-layout-mode"][value="${this.config.layout.mode}"]`);
                    if (layoutModeInput) layoutModeInput.checked = true;
                }
            } catch (error) {
                console.error('Error applying layout mode:', error);
            }

            try {
                if (this.config.layout && this.config.layout.position) {
                    const layoutPositionInput = document.querySelector(`input[name="data-layout-position"][value="${this.config.layout.position}"]`);
                    if (layoutPositionInput) layoutPositionInput.checked = true;
                }
            } catch (error) {
                console.error('Error applying layout position:', error);
            }

            try {
                if (this.config.topbar && this.config.topbar.color) {
                    const topbarColorInput = document.querySelector(`input[name="data-topbar-color"][value="${this.config.topbar.color}"]`);
                    if (topbarColorInput) topbarColorInput.checked = true;
                }
            } catch (error) {
                console.error('Error applying topbar color:', error);
            }

            try {
                if (this.config.sidenav && typeof this.config.sidenav.user !== 'undefined') {
                    const sidebarUserInput = document.querySelector(`input[name="sidebar-user"]`);
                    if (sidebarUserInput) sidebarUserInput.checked = this.config.sidenav.user;
                }
            } catch (error) {
                console.error('Error applying sidebar user:', error);
            }

            // Apply the changes to the page
            try {
                this.changeMenuColor(this.config.menu.color);
                this.changeLeftbarSize(this.config.sidenav.size, false);
                this.changeLayoutMode(this.config.layout.mode, false);
                this.changeLayoutPosition(this.config.layout.position);
                this.changeLayoutColor(this.config.theme);
                this.changeTopbarColor(this.config.topbar.color);
                this.changeSidebarUser(this.config.sidenav.user);
            } catch (error) {
                console.error('Error applying configuration:', error);
            }
        },
      },
      {
        key: "changeMenuColor",
        value: function (e) {
          this.config.menu.color = e;
          this.html.setAttribute("data-menu-color", e);
          this.saveConfig();
        },
      },
      {
        key: "changeLeftbarSize",
        value: function (e, save = true) {
          this.html.setAttribute("data-sidenav-size", e);
          if (save) {
            this.config.sidenav.size = e;
            this.saveConfig();
          }
        },
      },
      {
        key: "changeLayoutMode",
        value: function (e, save = true) {
          this.html.setAttribute("data-layout-mode", e);
          if (save) {
            this.config.layout.mode = e;
            this.saveConfig();
          }
        },
      },
      {
        key: "changeLayoutPosition",
        value: function (e) {
          this.config.layout.position = e;
          this.html.setAttribute("data-layout-position", e);
          this.saveConfig();
        },
      },
      {
        key: "changeLayoutColor",
        value: function (e) {
          this.config.theme = e;
          this.html.setAttribute("data-bs-theme", e);
          this.saveConfig();
        },
      },
      {
        key: "changeTopbarColor",
        value: function (e) {
          this.config.topbar.color = e;
          this.html.setAttribute("data-topbar-color", e);
          this.saveConfig();
        },
      },
      {
        key: "changeSidebarUser",
        value: function (e) {
          this.config.sidenav.user = e;
          e
            ? this.html.setAttribute("data-sidenav-user", e)
            : this.html.removeAttribute("data-sidenav-user");
          this.saveConfig();
        },
      },
      {
        key: "resetTheme",
        value: function () {
          this.config = JSON.parse(JSON.stringify(this.defaultConfig));
          this.applyConfig();
          this.saveConfig();
        },
      },
      {
        key: "saveConfig",
        value: function () {
          localStorage.setItem("__HYPER_CONFIG__", JSON.stringify(this.config));
        },
      },
      {
        key: "initSwitchListener",
        value: function () {
          var n = this;

          document.querySelectorAll("input[name=data-menu-color]").forEach(function (t) {
            t.addEventListener("change", function () {
              n.changeMenuColor(t.value);
            });
          });

          document.querySelectorAll("input[name=data-sidenav-size]").forEach(function (t) {
            t.addEventListener("change", function () {
              n.changeLeftbarSize(t.value);
            });
          });

          document.querySelectorAll("input[name=data-bs-theme]").forEach(function (t) {
            t.addEventListener("change", function () {
              n.changeLayoutColor(t.value);
            });
          });

          document.querySelectorAll("input[name=data-layout-mode]").forEach(function (t) {
            t.addEventListener("change", function () {
              n.changeLayoutMode(t.value);
            });
          });

          document.querySelectorAll("input[name=data-layout-position]").forEach(function (t) {
            t.addEventListener("change", function () {
              n.changeLayoutPosition(t.value);
            });
          });

          document.querySelectorAll("input[name=data-topbar-color]").forEach(function (t) {
            t.addEventListener("change", function () {
              n.changeTopbarColor(t.value);
            });
          });

          document.querySelectorAll("input[name=sidebar-user]").forEach(function (t) {
            t.addEventListener("change", function () {
              n.changeSidebarUser(t.checked);
            });
          });

          document.getElementById("reset-layout")?.addEventListener("click", function () {
            n.resetTheme();
          });

          document.querySelector(".button-toggle-menu")?.addEventListener("click", function () {
            var e = n.config.sidenav.size;
            var t = n.html.getAttribute("data-sidenav-size", e);
            if (t === "full") {
              n.showBackdrop();
            } else if (e === "fullscreen") {
              if (t === "fullscreen") {
                n.changeLeftbarSize(e === "fullscreen" ? "default" : e, false);
              } else {
                n.changeLeftbarSize("fullscreen", false);
              }
            } else if (t === "condensed") {
              n.changeLeftbarSize(e === "condensed" ? "default" : e, false);
            } else {
              n.changeLeftbarSize("condensed", false);
            }
            n.html.classList.toggle("sidebar-enable");
          });

          document.querySelector(".button-close-fullsidebar")?.addEventListener("click", function () {
            n.html.classList.remove("sidebar-enable");
            n.hideBackdrop();
          });

          document.querySelectorAll(".button-sm-hover").forEach(function (e) {
            e.addEventListener("click", function () {
              var e = n.config.sidenav.size;
              if (n.html.getAttribute("data-sidenav-size", e) === "sm-hover-active") {
                n.changeLeftbarSize("sm-hover", false);
              } else {
                n.changeLeftbarSize("sm-hover-active", false);
              }
            });
          });
        },
      },
      {
        key: "showBackdrop",
        value: function () {
          var e = document.createElement("div");
          e.id = "custom-backdrop";
          e.className = "offcanvas-backdrop fade show";
          document.body.appendChild(e);
          document.body.style.overflow = "hidden";
          if (window.innerWidth > 767) {
            document.body.style.paddingRight = "15px";
          }
          e.addEventListener("click", () => {
            this.html.classList.remove("sidebar-enable");
            this.hideBackdrop();
          });
        },
      },
      {
        key: "hideBackdrop",
        value: function () {
          var e = document.getElementById("custom-backdrop");
          if (e) {
            document.body.removeChild(e);
            document.body.style.overflow = null;
            document.body.style.paddingRight = null;
          }
        },
      },
      {
        key: "initWindowSize",
        value: function () {
          var t = this;
          window.addEventListener("resize", function () {
            t._adjustLayout();
          });
        },
      },
      {
        key: "_adjustLayout",
        value: function () {
          var e = this;
          if (window.innerWidth <= 767.98) {
            e.changeLeftbarSize("full", false);
          } else if (window.innerWidth <= 1140) {
            if (e.config.sidenav.size !== "full" && e.config.sidenav.size !== "fullscreen") {
              if (e.config.sidenav.size === "sm-hover") {
                e.changeLeftbarSize("condensed", false);
              } else {
                e.changeLeftbarSize("condensed", false);
              }
            }
          } else {
            e.changeLeftbarSize(e.config.sidenav.size, false);
            e.changeLayoutMode(e.config.layout.mode, false);
          }
        },
      },
      {
        key: "init",
        value: function () {
          this.initConfig();
          this.initSwitchListener();
          this.initWindowSize();
          this._adjustLayout();
        },
      },
    ]),
    e
  );
})();

new ThemeCustomizer().init();
